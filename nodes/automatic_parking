#!/usr/bin/python
# -*- coding: utf-8 -*-
import math
import time

import rospy
import tf
import actionlib

from enum import Enum
from nav_msgs.msg import Odometry
from ar_track_alvar_msgs.msg import AlvarMarkers
from geometry_msgs.msg import Twist, PoseWithCovarianceStamped
from tf.transformations import euler_from_quaternion, quaternion_from_euler
from std_msgs.msg import String
from sensor_msgs.msg import LaserScan
from ros_automatic_parking.msg import *

from visualization_msgs.msg import Marker
from gazebo_msgs.srv import SetModelState
from gazebo_msgs.msg import ModelState
from gazebo_msgs.srv import DeleteModel 
from gazebo_msgs.srv import SpawnModel
from geometry_msgs.msg import Pose, PoseStamped, TransformStamped
import random
import matplotlib.pyplot as plt
# from mpl_toolkits.mplot3d import Axes3D
import plotly.graph_objects as go
import numpy as np

class AutomaticParking():
    
    def __init__(self):
        rospy.on_shutdown(self.fnShutDown)

        self.experiment()
        
        # init subscribers and publishers
        self.sub_odom_robot = rospy.Subscriber('/odom_server', Odometry, self.cbGetRobotOdom, queue_size = 1)
        self.sub_info_marker = rospy.Subscriber('/ar_pose_marker', AlvarMarkers, self.cbGetMarkerOdom, queue_size = 1)
        self.sub_bumper_status = rospy.Subscriber('/bumper_info', String, self.cbBumperInfo, queue_size=1)
        self.sub_laser_scan = rospy.Subscriber('/scan', LaserScan, self.cbLaserScan, queue_size=1)
        self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
        # init params
        self.Kp = rospy.get_param("~/Kp", default=1.2)
        self.park_distance = rospy.get_param("~/park_distance", default=0.15)
        self.courier_mode = rospy.get_param("~/courier_mode", default=False)
        self.dock_marker_id = rospy.get_param("~/dock_marker_id", default=17)
        # init states
        self.ParkingSequence = Enum('ParkingSequence', 'searching_parking_lot changing_direction moving_nearby_parking_lot parking stop finished')
        self.NearbySequence = Enum('NearbySequence', 'initial_turn go_straight turn_right parking')
        # init poses
        self.robot_2d_pose_x = .0
        self.robot_2d_pose_y = .0
        self.robot_2d_theta = .0
        self.marker_2d_pose_x = .0
        self.marker_2d_pose_y = .0
        self.marker_2d_theta = .0

        self.previous_robot_2d_theta = .0
        self.total_robot_2d_theta = .0
        self.is_triggered = False
        # init finish state flag
        self.is_sequence_finished = False
        # init recieved data flags
        self.is_odom_received = False
        self.is_marker_pose_received = False
        self.is_bumper_pressed = False
        self.is_obstacle = False

        self.loop_rate = rospy.Rate(10) # 10hz

        self.timer = 0
        # rospy.sleep(0.1)
        
        # init action server
        self._as = actionlib.SimpleActionServer("/parking", parkingAction, execute_cb = self.fnParking, auto_start=False)
        self._feedback = parkingFeedback()
        self._result = parkingResult()
        
        self._as.start()
        

        
# robot odom callback get robot pose and angle
    def cbGetRobotOdom(self, robot_odom_msg):
        if self.is_odom_received == False:
            self.is_odom_received = True 
        # write robot pose to class vars
        # amcl_odom = rospy.wait_for_message("/amcl_pose", PoseWithCovarianceStamped)
        # print("so")
        self.robot_2d_pose_x, self.robot_2d_pose_y, self.robot_2d_theta = self.fnGet2DRobotPose(robot_odom_msg)

        if (self.robot_2d_theta - self.previous_robot_2d_theta) > 5.:
            d_theta = (self.robot_2d_theta - self.previous_robot_2d_theta) - 2 * math.pi
        elif (self.robot_2d_theta - self.previous_robot_2d_theta) < -5.:
            d_theta = (self.robot_2d_theta - self.previous_robot_2d_theta) + 2 * math.pi
        else:
            d_theta = (self.robot_2d_theta - self.previous_robot_2d_theta)

        self.total_robot_2d_theta = self.total_robot_2d_theta + d_theta
        self.previous_robot_2d_theta = self.robot_2d_theta

        self.robot_2d_theta = self.total_robot_2d_theta

# aruco marker pose callback 
    def cbGetMarkerOdom(self, markers_odom_msg):
        for marker_odom_msg in markers_odom_msg.markers:
            if marker_odom_msg.id == self.dock_marker_id:
                self.is_marker_pose_received = True
                # write marker pose to class vars
                self.marker_2d_pose_x, self.marker_2d_pose_y, self.marker_2d_theta = self.fnGet2DMarkerPose(marker_odom_msg)

# bamper info callback
    def cbBumperInfo(self, bumper_info):
        self.is_bumper_pressed = False
        if bumper_info.text != "No bumpers":
            self.is_bumper_pressed = True

# laser scan callback
    def cbLaserScan(self, laser_data):
        ang = laser_data.angle_min
        self.is_obstacle = False
        # check if obstacle is in the sector
        for dist in laser_data.ranges:
            if laser_data.angle_min + math.pi - 0.78 < ang < laser_data.angle_min + math.pi + 0.78:
                # check sector range and nearby marker
                if dist < 0.6 and dist != 0.0 and self.marker_2d_pose_x > 0.3:
                    self.is_obstacle = True
            ang += laser_data.angle_increment

        
# main parking action server state machine
    def fnParking(self, goal):
        
        self._result.is_docked = False
        self.current_nearby_sequence = self.NearbySequence.initial_turn.value
        self.current_parking_sequence = self.ParkingSequence.searching_parking_lot.value

        while self._result.is_docked != True:
            # obstacle state
            if self.is_obstacle:
                self.fnStop()
                rospy.loginfo("Obstacle behind robot")
                self._feedback.status = "Obstacle behind robot"
                self._as.publish_feedback(self._feedback)
            # bamper pressed state
            elif self.is_bumper_pressed:
                self.fnStop()
                rospy.loginfo("Bumper had pressed")
                self._feedback.status = "Bumper had pressed"
                self._as.publish_feedback(self._feedback)
            # searching marker state
            elif self.current_parking_sequence == self.ParkingSequence.searching_parking_lot.value:
                self.is_sequence_finished = self.fnSeqSearchingGoal()
                
                if self.is_sequence_finished == True:
                    rospy.loginfo("Searching marker finished")
                    self._feedback.status = "Searching marker finished"
                    self._as.publish_feedback(self._feedback)
                    rospy.loginfo("Changing direction")
                    self._feedback.status = "Changing direction"
                    self._as.publish_feedback(self._feedback)
                    self.current_parking_sequence = self.ParkingSequence.changing_direction.value
                    self.is_sequence_finished = False
                else:
                    return
            # changing direction state
            elif self.current_parking_sequence == self.ParkingSequence.changing_direction.value:
                self.is_sequence_finished = self.fnSeqChangingDirection()
                
                if self.is_sequence_finished == True:
                    rospy.loginfo("Changing direction finished")
                    self._feedback.status = "Changing direction finished"
                    self._as.publish_feedback(self._feedback)
                    rospy.loginfo("Start moving parking")
                    self._feedback.status = "Start moving parking"
                    self._as.publish_feedback(self._feedback)
                    self.current_parking_sequence = self.ParkingSequence.moving_nearby_parking_lot.value
                    self.is_sequence_finished = False
            # moving nearby parking state
            elif self.current_parking_sequence == self.ParkingSequence.moving_nearby_parking_lot.value:
                self.is_sequence_finished = self.fnSeqMovingNearbyParkingLot()
                
                if self.is_sequence_finished == True:
                    rospy.loginfo("Moving nearby parking finished")
                    self._feedback.status = "Moving nearby parking finished"
                    self._as.publish_feedback(self._feedback)
                    rospy.loginfo("Start parking")
                    self._feedback.status = "Start parking"
                    self._as.publish_feedback(self._feedback)
                    self.current_parking_sequence = self.ParkingSequence.parking.value
                    self.is_sequence_finished = False
            # parking state
            elif self.current_parking_sequence == self.ParkingSequence.parking.value:
                self.is_sequence_finished = self.fnSeqParking()
                
                if self.is_sequence_finished == True:
                    self.current_parking_sequence = self.ParkingSequence.stop.value
                    self.is_sequence_finished = False
            # finish state
            elif self.current_parking_sequence == self.ParkingSequence.stop.value:
                self.fnStop()
                rospy.loginfo("Parking finished")
                self._feedback.status = "Parking finished"
                self._as.publish_feedback(self._feedback)
                self.current_parking_sequence = self.ParkingSequence.finished.value
                self._result.is_docked = True
                self._as.set_succeeded(self._result)

            self.loop_rate.sleep()

    # searcing marker function
    def fnSeqSearchingGoal(self):
        timer = time.time() + 60
        while self.is_marker_pose_received is False:
            print('searching')
            self.desired_angle_turn = -0.6
            self.fnTurn(self.desired_angle_turn)
            rospy.sleep(1)
            self.fnStop()
            rospy.sleep(0.2)
            if time.time() > timer:
                self._as.set_aborted(self._result)
                rospy.loginfo("No markers found after 60 second")
                return False
        self.fnStop()
        return True
    # changing direction function
    def fnSeqChangingDirection(self):
        desired_angle_turn = -1. *  math.atan2(self.marker_2d_pose_y - 0, self.marker_2d_pose_x - 0)
        print(desired_angle_turn)
        self.fnTurn(desired_angle_turn)
        if abs(desired_angle_turn) < 0.01:
            self.fnStop()
            return True
        else:
            return False
    # moving nearby parking function
    def fnSeqMovingNearbyParkingLot(self):
        if self.current_nearby_sequence == self.NearbySequence.initial_turn.value:
            if self.is_triggered == False:
                self.is_triggered = True
                # set init robot and merker pose
                self.initial_robot_pose_theta = self.robot_2d_theta
                self.initial_robot_pose_x = self.robot_2d_pose_x
                self.initial_robot_pose_y = self.robot_2d_pose_y
                self.initial_marker_pose_theta =self.marker_2d_theta
                self.initial_marker_pose_x = self.marker_2d_pose_x
                # marker_thetas = []
                # marker_poses = []
                # for i in range(10):
                #     marker_thetas.append(self.marker_2d_theta)
                #     marker_poses.append(self.marker_2d_pose_x)
                #     print(self.marker_2d_theta)
                #     time.sleep(0.1)
                # self.initial_marker_pose_theta = np.mean(marker_thetas)
                # self.initial_marker_pose_x = np.mean(marker_poses)


            # if marker right turn 90 right, if marker left turn 90 left
            if self.initial_marker_pose_theta < 0.0:
                desired_angle_turn = (math.pi / 2.0) + self.initial_marker_pose_theta - (self.robot_2d_theta - self.initial_robot_pose_theta)
            elif self.initial_marker_pose_theta > 0.0:
                desired_angle_turn = -(math.pi / 2.0) + self.initial_marker_pose_theta - (self.robot_2d_theta - self.initial_robot_pose_theta)

            desired_angle_turn = -1. * desired_angle_turn
            
            
            self.fnTurn(desired_angle_turn)

            # check turn angle threshold
            if abs(desired_angle_turn) < 0.05:
                self.fnStop()
                self.current_nearby_sequence = self.NearbySequence.go_straight.value
                self.is_triggered = False

        elif self.current_nearby_sequence == self.NearbySequence.go_straight.value:
            dist_from_start = self.fnCalcDistPoints(self.initial_robot_pose_x, self.robot_2d_pose_x, self.initial_robot_pose_y, self.robot_2d_pose_y)
        
            desired_dist = (self.initial_marker_pose_x + 0.43) * abs(math.cos((math.pi / 2.) - self.initial_marker_pose_theta))
            remained_dist = desired_dist - dist_from_start
            self.fnGoStraight()
            if remained_dist < 0.01:
                self.fnStop()
                self.current_nearby_sequence = self.NearbySequence.turn_right.value
        # return init angle
        elif self.current_nearby_sequence == self.NearbySequence.turn_right.value:
            if self.is_triggered == False:
                self.is_triggered = True
                self.initial_robot_pose_theta = self.robot_2d_theta

            if self.initial_marker_pose_theta > 0.0:
                desired_angle_turn = -(math.pi / 2.0) + (self.robot_2d_theta - self.initial_robot_pose_theta)
            elif self.initial_marker_pose_theta < 0.0:
                desired_angle_turn = (math.pi / 2.0) + (self.robot_2d_theta - self.initial_robot_pose_theta)

            self.fnTurn(desired_angle_turn)

            if abs(desired_angle_turn) < 0.05:
                self.fnStop()
                self.current_nearby_sequence = self.NearbySequence.parking.value
                self.is_triggered = False
                return True

        return False

    # perking function
    def fnSeqParking(self):
        desired_angle_turn = math.atan2(self.marker_2d_pose_y - 0, self.marker_2d_pose_x - 0)
        self.fnTrackMarker(-desired_angle_turn)
        
        if abs(self.marker_2d_pose_x) < self.park_distance:
            self.fnStop()
            return True
        else:
            return False
    # stop function
    def fnStop(self):
        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)
    # turn function
    def fnTurn(self, theta):

        angular_z = self.Kp * theta
        if self.courier_mode:
            angular_z = self.Kp * theta * self.Kp
            
        if angular_z > 0.5:
            angular_z = 0.5
        if angular_z < -0.5:
            angular_z = -0.5

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -angular_z
        self.pub_cmd_vel.publish(twist)
    # go backward function
    def fnGoStraight(self):
        twist = Twist()
        twist.linear.x = 0.2
        if self.courier_mode:
            twist.linear.x = -0.1
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)
    # track marker function
    def fnTrackMarker(self, theta):

        angular_z = self.Kp * theta
        if angular_z > 0.5:
            angular_z = 0.5
        if angular_z < -0.5:
            angular_z = -0.5
        linear = (self.marker_2d_pose_x - 0.15) * 0.2
        if linear < 0.02:
            linear = 0.02
        twist = Twist()
        twist.linear.x = 0.10
        if self.courier_mode:
            twist.linear.x = -linear
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -angular_z
        self.pub_cmd_vel.publish(twist)      

    def fnGet2DRobotPose(self, robot_odom_msg):
        quaternion = (robot_odom_msg.pose.pose.orientation.x, robot_odom_msg.pose.pose.orientation.y, robot_odom_msg.pose.pose.orientation.z, robot_odom_msg.pose.pose.orientation.w)
        theta = tf.transformations.euler_from_quaternion(quaternion)[2]

        if theta < 0:
            theta = theta + math.pi * 2
        if theta > math.pi * 2:
            theta = theta - math.pi * 2

        pos_x = robot_odom_msg.pose.pose.position.x
        pos_y = robot_odom_msg.pose.pose.position.y

        return pos_x, pos_y, theta

    def fnGet2DMarkerPose(self, marker_odom_msg):
        quaternion = (marker_odom_msg.pose.pose.orientation.x, marker_odom_msg.pose.pose.orientation.y, marker_odom_msg.pose.pose.orientation.z, marker_odom_msg.pose.pose.orientation.w)
        theta = tf.transformations.euler_from_quaternion(quaternion)[2]

        theta = theta + math.pi / 2.

        # if theta < 0:
        #     theta = theta + math.pi * 2
        # if theta > math.pi * 2:
        #     theta = theta - math.pi * 2

        pos_x = marker_odom_msg.pose.pose.position.x
        pos_y = marker_odom_msg.pose.pose.position.y

        return pos_x, pos_y, theta

    def fnCalcDistPoints(self, x1, x2, y1, y2):
        return math.sqrt((x1 - x2) ** 2. + (y1 - y2) ** 2.)

    def fnShutDown(self):
        rospy.loginfo("Shutting down. cmd_vel will be 0")

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

    def spawn_charge(self, x, y, a):
        print(x, a)
        quaternion = quaternion_from_euler(0,0,a)

        initial_pose = Pose()
        initial_pose.position.x = x - 0.43
        initial_pose.position.y = y # 5.25 - 0 m
        initial_pose.orientation.x = quaternion[0]
        initial_pose.orientation.y = quaternion[1]
        initial_pose.orientation.z = quaternion[2]
        initial_pose.orientation.w = quaternion[3]

        f = open('/home/andrey/.gazebo/models/charge/model.sdf','r')
        sdff = f.read()

        rospy.wait_for_service('gazebo/spawn_sdf_model')
        spawn_model_prox = rospy.ServiceProxy('gazebo/spawn_sdf_model', SpawnModel)
        spawn_model_prox("Charge", sdff, "Charge_space", initial_pose, "world") 

    def delete_model(self):
        model_name = "Charge"
        rospy.wait_for_service('gazebo/delete_model')
        delete_model_prox = rospy.ServiceProxy('gazebo/delete_model', DeleteModel)
        delete_model_prox(model_name) 

    def move_model(self, x, y, a):
        rospy.wait_for_service('/gazebo/set_model_state')
        move_model_prox = rospy.ServiceProxy('/gazebo/set_model_state', SetModelState)
        state = ModelState()
        state.model_name = "courier_solid"
        state.pose.position.x = x
        state.pose.position.y = y
        quaternion = quaternion_from_euler(0,0,a)
        state.pose.orientation.x = quaternion[0]
        state.pose.orientation.y = quaternion[1]
        state.pose.orientation.z = quaternion[2]
        state.pose.orientation.w = quaternion[3]
        move_model_prox(state)

        br = tf.TransformBroadcaster()

        tr = TransformStamped()
        tr.header.frame_id = "world"
        tr.child_frame_id = "robot"
        tr.transform.translation.x = x + 0.43
        tr.transform.translation.y = y
        tr.transform.rotation.x = quaternion[0]
        tr.transform.rotation.y = quaternion[1]
        tr.transform.rotation.z = quaternion[2]
        tr.transform.rotation.w = quaternion[3]

        initial_pose = PoseStamped()
        initial_pose.header.frame_id = "world"
        initial_pose.pose.position.x = - 0.7
        initial_pose.pose.position.y = 0.2
        quaternion1 = quaternion_from_euler(0,0,0)
        initial_pose.pose.orientation.x = quaternion1[0] 
        initial_pose.pose.orientation.y = quaternion1[1]
        initial_pose.pose.orientation.z = quaternion1[2] 
        initial_pose.pose.orientation.w = quaternion1[3] 
        listener = tf.TransformListener()
        listener.setTransform(tr)
        initial_pose = listener.transformPose('robot', initial_pose)
        marker_pose = initial_pose
        return marker_pose
        
        

    
    def pol2cart(self, rho, phi):
        x = rho * np.cos(phi)
        y = rho * np.sin(phi)
        return(x, y)

    def sort_color(self,str):
        if str == "red":
            return 3
        elif str == "blue":
            return 1
        elif str == "green":
            return 2
        
    
    def experiment(self):
        import matplotlib.lines as lines
        # self.delete_model()
        s_x, s_y, s_a = -0.58,0,0
        lim = 0.5
        # self.spawn_charge(s_x, s_y, s_a)
        # self.move_model(0, 0.25, 0)
        robot_poses_x = []
        robot_poses_y = []
        robot_colors = []

        centr_poses_x = []
        centr_poses_y = []
        centr_colors = []

        robot_er_poses_x = []
        robot_er_poses_y = []
        robot_er_ang = []
        robot_er_colors = []



        # for i in range(1):
        #     print(i)
        #     r = random.uniform(0, 0.25)
        #     phi = random.uniform(0, math.pi*2)
        #     x,y = self.pol2cart(r, phi)
        #     # ang = random.uniform(0, 0.13)
        #     # x, y = 0.7,0.7
        #     ang = math.atan2(y - s_y, x + 0.43 - s_x) 
        #     # print(x,y,ang)
            
        #     marker_pose_real = self.move_model(x, y, ang)
        #     go = False

        #     time.sleep(0.2)

        #     marker = rospy.wait_for_message("/ar_pose_marker", AlvarMarkers, 5)
        #     if len(marker.markers) != 0:
        #         quater = [marker.markers[0].pose.pose.orientation.x, marker.markers[0].pose.pose.orientation.y, marker.markers[0].pose.pose.orientation.z, marker.markers[0].pose.pose.orientation.w]
        #         angs = euler_from_quaternion(quater)
    
        #         quater_real = [marker_pose_real.pose.orientation.x, marker_pose_real.pose.orientation.y, marker_pose_real.pose.orientation.z, marker_pose_real.pose.orientation.w]
        #         angs_real = euler_from_quaternion(quater_real)
        #         angle_error = abs(angs_real[2] - angs[2] + math.pi/2 - math.pi) 
        #         pos_x_error = abs(marker_pose_real.pose.position.x - marker.markers[0].pose.pose.position.x)
        #         pos_y_error = abs(marker_pose_real.pose.position.y - marker.markers[0].pose.pose.position.y)
        #         m_a = angs[2] + math.pi/2.0
        #         if m_a < 0:
        #             desired_angle_turn = math.pi/2.0 + m_a
        #         elif m_a > 0:
        #             desired_angle_turn = -math.pi/2.0 + m_a
        #         desired_angle_turn = -1 * desired_angle_turn
        #         desired_dist = (marker.markers[0].pose.pose.position.x + 0.43) * abs(math.cos((math.pi/2.0) - m_a)) 
        #         p_x, p_y = self.pol2cart(desired_dist, desired_angle_turn)
        #         print(p_x, p_y)
        #         centr_poses_x.append(x + p_x)
        #         centr_poses_y.append(y + p_y)
  
        #         if -0.111 * (x + p_x) - (y + p_y) - 0.0778 < 0.0:
        #             j += 1
        #             centr_colors.append("black")
        #         elif 0.111 * (x + p_x) - (y + p_y) + 0.0778 < 0.0:
        #             j += 1
        #             centr_colors.append("black")
        #         else:
        #             centr_colors.append("red")
        #             robot_er_poses_x.append(x)
        #             robot_er_poses_y.append(y)
        #             robot_er_ang.append(ang)
        #             if angle_error < 0.017:
        #                 robot_er_colors.append("green")
        #             elif 0.017 < angle_error < 0.087:
        #                 robot_er_colors.append("blue")
        #             elif angle_error > 0.087:
        #                 robot_er_colors.append("red")
                    
        #         # print(angle_error)

        #         robot_poses_x.append(x)
        #         robot_poses_y.append(y)
        #         if angle_error < 0.017:
        #             robot_colors.append("green")
        #         elif 0.017 < angle_error < 0.087:
        #             robot_colors.append("blue")
        #         elif angle_error > 0.087:
        #             robot_colors.append("red")


        f= open("/home/andrey/exp_results/centr_pose_x.txt","r")
        while True: 
            line = f.readline() 
            if not line: 
                break
            centr_poses_x.append(float(line))
        f.close()
        f= open("/home/andrey/exp_results/centr_pose_y.txt","r")
        while True: 
            line = f.readline() 
            if not line: 
                break
            centr_poses_y.append(float(line))
        f.close()
        f= open("/home/andrey/exp_results/centr_pose_color.txt","r")
        while True: 
            line = f.readline() 
            if not line: 
                break
            centr_colors.append(str(line).strip())
        f.close()
        f= open("/home/andrey/exp_results/robot_pose_x.txt","r")
        while True: 
            line = f.readline() 
            if not line: 
                break
            robot_poses_x.append(float(line))
        f.close() 
        f= open("/home/andrey/exp_results/robot_pose_y.txt","r")
        while True: 
            line = f.readline() 
            if not line: 
                break
            robot_poses_y.append(float(line))
        f.close()
        f= open("/home/andrey/exp_results/robot_pose_color.txt","r")
        while True: 
            line = f.readline() 
            if not line: 
                break
            robot_colors.append(str(line).strip())
        f.close()

        fig1 = plt.figure(1)
        ax = fig1.add_axes([0.07,0.07,1,1])
        ax.set_xlim(-lim,lim)
        ax.set_ylim(-lim, lim)

        shift = 0
        circle1 = plt.Circle((0, 0), 0.25, fill=False)
        line = lines.Line2D([s_x + shift , s_x + 2 + shift], [s_y, s_y + 0.3],
                    lw=3, color='black', axes=ax)
        line2 = lines.Line2D([s_x + shift, s_x + 2 + shift], [s_y, s_y - 0.3],
                    lw=3, color='black', axes=ax)
        line3 = lines.Line2D([-1, 1], [s_y, s_y],
                    lw=2, color='green', axes=ax)
        ax.add_artist(circle1)
        ax.add_artist(line)
        ax.add_artist(line2)
        ax.add_artist(line3)
        ax.scatter(x = centr_poses_x, y = centr_poses_y, s = 4**2, c = centr_colors)
        
        fig2 = plt.figure(2)
        ax2 = fig2.add_axes([0.07,0.07,1,1])
        ax2.set_xlim(-lim,lim)
        ax2.set_ylim(-lim, lim)
        circle1 = plt.Circle((0, 0), 0.25, fill=False)
        line = lines.Line2D([s_x , s_x + 2], [s_y, s_y + 0.3],
                    lw=3, color='black', axes=ax2)
        line2 = lines.Line2D([s_x , s_x + 2], [s_y, s_y - 0.3],
                    lw=3, color='black', axes=ax2)
        line3 = lines.Line2D([-1, 1], [s_y, s_y],
                    lw=2, color='green', axes=ax2)
        ax2.add_artist(circle1)
        ax2.add_artist(line)
        ax2.add_artist(line2)
        ax2.add_artist(line3)
        robot_colors.sort(key = self.sort_color)
        indices = sorted(range(len(robot_colors)), key=robot_colors.__getitem__)
        from operator import itemgetter
        sorted_by_robot_colors = itemgetter(*indices)
        robot_poses_x = sorted_by_robot_colors(robot_poses_x)
        robot_poses_y = sorted_by_robot_colors(robot_poses_y)
        ax2.scatter(x = robot_poses_x, y = robot_poses_y, s = 4**2, c = robot_colors)

        # fig3 = plt.figure(3)
        # ax3 = fig3.add_axes([0.07,0.07,1,1])
        # ax3.set_xlim(-lim,lim)
        # ax3.set_ylim(-lim, lim)
        # circle1 = plt.Circle((0, 0), 0.25, fill=False)
        # line = lines.Line2D([s_x , s_x + 2], [s_y, s_y + 0.3],
        #             lw=3, color='black', axes=ax3)
        # line2 = lines.Line2D([s_x , s_x + 2], [s_y, s_y - 0.3],
        #             lw=3, color='black', axes=ax3)
        # line3 = lines.Line2D([-1, 1], [s_y, s_y],
        #             lw=2, color='green', axes=ax3)
        # ax3.add_artist(circle1)
        # ax3.add_artist(line)
        # ax3.add_artist(line2)
        # ax3.add_artist(line3)
        # ax3.scatter(x = robot_er_poses_x, y = robot_er_poses_y, s = 7**2, c = robot_er_colors)

        # f= open("/home/andrey/exp_results/centr_pose_x.txt","w")
        # for p in centr_poses_x:
        #     f.write(str(p) + '\n')
        # f.close()
        # f= open("/home/andrey/exp_results/centr_pose_y.txt","w")
        # for p in centr_poses_y:
        #     f.write(str(p) + '\n')
        # f.close()
        # f= open("/home/andrey/exp_results/centr_pose_color.txt","w")
        # for p in centr_colors:
        #     f.write(str(p) + '\n')
        # f.close()
        # f= open("/home/andrey/exp_results/robot_pose_x.txt","w")
        # for p in robot_poses_x:
        #     f.write(str(p) + '\n')
        # f.close() 
        # f= open("/home/andrey/exp_results/robot_pose_y.txt","w")
        # for p in robot_poses_y:
        #     f.write(str(p) + '\n')
        # f.close()
        # f= open("/home/andrey/exp_results/robot_pose_color.txt","w")
        # for p in robot_colors:
        #     f.write(str(p) + '\n')
        # f.close() 

        plt.show()


        # fig = plt.figure()
        # i = 1
        # self.distance = []
        # self.marker_poses = []
        # self.real_merker_poses = []
        # self.errors = []
        # for a in np.arange(-0.79, 0.79, 0.087):
        #     self.error = []
        #     a = round(a, 2)
        #     for x in np.arange(0.5,1.90,0.1):
        #         x = round(x, 2)
        #         self.spawn_charge(x, 0, a)
        #         time.sleep(1)
        #         marker = rospy.wait_for_message("/ar_pose_marker", AlvarMarkers, 5)
        #         if len(marker.markers) != 0:
        #             self.marker_poses.append(a)
        #             quater = [marker.markers[0].pose.pose.orientation.x, marker.markers[0].pose.pose.orientation.y, marker.markers[0].pose.pose.orientation.z, marker.markers[0].pose.pose.orientation.w]
        #             angs = euler_from_quaternion(quater)
        #             self.real_merker_poses.append(angs[2] + math.pi/2)     
        #             self.error.append(abs(abs(a) - abs(angs[2] + math.pi/2)))
        #             self.distance.append(x)
        #         self.delete_model()
        #     self.errors.append(self.error)
        #     # subp = plt.subplot(4,2,i)
        #     # subp.set_title("Distance " + str(x))
        #     # plt.plot(self.marker_poses, self.errors)
        #     # plt.ylabel("Angle error")
        #     # plt.xlabel("Angle (rad)")
        #     i += 1

        # print("errors")
        # print(self.errors)
        # print("dist")
        # print(self.distance)
        # print("angle")
        # print(self.marker_poses)

        # fig = go.Figure(data=[go.Surface(z=self.errors, x=self.distance, y=self.marker_poses)])
        # fig.update_layout(title='Errors', autosize=True,
        #           width=500, height=500,
        #           margin=dict(l=65, r=50, b=65, t=90))
        # fig.show()
        # ax = fig.add_subplot(111, projection='3d')
        # ax.plot_surface(self.distance, self.marker_poses, self.errors, cmap='inferno')
        # ax.legend()
        # plt.show()



    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('automatic_parking')
    node = AutomaticParking()
    node.main()
